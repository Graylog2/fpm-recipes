#!/bin/sh

set -e

user="graylog"
group="graylog"
datadir="/var/lib/graylog-server"
logdir="/var/log/graylog-server"

remove_data="false"

case "$1" in
	# DEB based systems
	remove)
		remove_data="false"
		;;

	purge)
		remove_data="true"
		;;

	upgrade|failed-upgrade|abort-install|abort-upgrade|disappear)
		# Nothing to do here
		;;
	# RPM based systems
	0)
		# Removal
		case "${RPM_PACKAGE_NAME}-${RPM_PACKAGE_VERSION}" in
			# In Graylog 5.0.0 we removed the separate plugin
			# packages and only have "graylog-server" and
			# "graylog-enterprise" packages from that point on.
			# If a user had "graylog-server" plus the enterprise
			# plugins installed, they have to install
			# "graylog-enterprise" to update to 5.0.
			# That triggers an uninstall of the "graylog-server"
			# package.
			# We don't want to remove the journal dir and other
			# data in that case, so we set remove_data to false
			# to make sure users don't lose data.
			graylog-server-5.0.*)
				remove_data="false"
				;;
			# The problem doesn't exist when users go from 5.0
			# to 5.1 in the future, so we can enable the data
			# removal when uninstalling the "graylog-server" package
			# for other versions.
			*)
				remove_data="true"
				;;
		esac
		;;
	1)
		# Upgrade
		remove_data="false"
		;;
	*)
		echo "[ERROR] post-uninstall script called with unknown argument: '$1'"
		exit 1
		;;
esac

if [ "$remove_data" = "true" ]; then
	rm -rf "$datadir" "$logdir"
	rm -f /etc/graylog/server/node-id
	rm -f /etc/init/graylog-server.override

	if id "$user" > /dev/null 2>&1 ; then
		userdel "$user" || true
	fi

	if getent group "$group" > /dev/null 2>&1 ; then
		groupdel "$group" || true
	fi
fi

exit 0
